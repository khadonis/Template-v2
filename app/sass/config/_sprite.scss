// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-behance-name: 'icon-behance';
$icon-behance-x: 64px;
$icon-behance-y: 64px;
$icon-behance-offset-x: -64px;
$icon-behance-offset-y: -64px;
$icon-behance-width: 24px;
$icon-behance-height: 24px;
$icon-behance-total-width: 128px;
$icon-behance-total-height: 128px;
$icon-behance-image: '../images/sprite.png';
$icon-behance: (64px, 64px, -64px, -64px, 24px, 24px, 128px, 128px, '../images/sprite.png', 'icon-behance', );
$icon-code-name: 'icon-code';
$icon-code-x: 0px;
$icon-code-y: 0px;
$icon-code-offset-x: 0px;
$icon-code-offset-y: 0px;
$icon-code-width: 64px;
$icon-code-height: 64px;
$icon-code-total-width: 128px;
$icon-code-total-height: 128px;
$icon-code-image: '../images/sprite.png';
$icon-code: (0px, 0px, 0px, 0px, 64px, 64px, 128px, 128px, '../images/sprite.png', 'icon-code', );
$icon-design-name: 'icon-design';
$icon-design-x: 64px;
$icon-design-y: 0px;
$icon-design-offset-x: -64px;
$icon-design-offset-y: 0px;
$icon-design-width: 64px;
$icon-design-height: 64px;
$icon-design-total-width: 128px;
$icon-design-total-height: 128px;
$icon-design-image: '../images/sprite.png';
$icon-design: (64px, 0px, -64px, 0px, 64px, 64px, 128px, 128px, '../images/sprite.png', 'icon-design', );
$icon-down-name: 'icon-down';
$icon-down-x: 64px;
$icon-down-y: 88px;
$icon-down-offset-x: -64px;
$icon-down-offset-y: -88px;
$icon-down-width: 15px;
$icon-down-height: 29px;
$icon-down-total-width: 128px;
$icon-down-total-height: 128px;
$icon-down-image: '../images/sprite.png';
$icon-down: (64px, 88px, -64px, -88px, 15px, 29px, 128px, 128px, '../images/sprite.png', 'icon-down', );
$icon-idea-name: 'icon-idea';
$icon-idea-x: 0px;
$icon-idea-y: 64px;
$icon-idea-offset-x: 0px;
$icon-idea-offset-y: -64px;
$icon-idea-width: 64px;
$icon-idea-height: 64px;
$icon-idea-total-width: 128px;
$icon-idea-total-height: 128px;
$icon-idea-image: '../images/sprite.png';
$icon-idea: (0px, 64px, 0px, -64px, 64px, 64px, 128px, 128px, '../images/sprite.png', 'icon-idea', );
$icon-linkedin-name: 'icon-linkedin';
$icon-linkedin-x: 88px;
$icon-linkedin-y: 64px;
$icon-linkedin-offset-x: -88px;
$icon-linkedin-offset-y: -64px;
$icon-linkedin-width: 24px;
$icon-linkedin-height: 24px;
$icon-linkedin-total-width: 128px;
$icon-linkedin-total-height: 128px;
$icon-linkedin-image: '../images/sprite.png';
$icon-linkedin: (88px, 64px, -88px, -64px, 24px, 24px, 128px, 128px, '../images/sprite.png', 'icon-linkedin', );
$spritesheet-width: 128px;
$spritesheet-height: 128px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($icon-behance, $icon-code, $icon-design, $icon-down, $icon-idea, $icon-linkedin, );
$spritesheet: (128px, 128px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
